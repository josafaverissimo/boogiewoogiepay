import java.nio.file.Files
import java.nio.file.attribute.BasicFileAttributes

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  application
  id("com.gradleup.shadow") version "8.3.8"
  id("org.graalvm.buildtools.native") version "0.10.6"
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  // Use JUnit Jupiter for testing.
  testImplementation(libs.junit.jupiter)

  testRuntimeOnly("org.junit.platform:junit-platform-launcher")

  // This dependency is used by the application.
  implementation(libs.guava)
  implementation(libs.javalin)
  implementation(libs.slf4j.simple)
  implementation(libs.dotenv.java)
  implementation(libs.jackson.databind)

  implementation(project(":shared"))
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(24)
    vendor = JvmVendorSpec.ORACLE
  }
}

application {
  // Define the main class for the application.
  mainClass = "com.josafaverissimo.boogiewoogiepay.App"
}

graalvmNative {
  agent {
    enabled.set(true)
    metadataCopy {
      inputTaskNames.add("run")
      outputDirectories.add("src/main/resources/META-INF/native-image/com.josafaverissimo.boogiewoogiepay")
      mergeWithExisting.set(true)
    }
  }
}


tasks.named<Test>("test") {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}

tasks.register("copyMetadata") {
  val agentOutput = file("build/native/agent-output")
  val destinationFile = file("src/main/resources/META-INF/native-image/reachability.json")

  doLast {
    val latestFile = agentOutput.walkTopDown()
    .filter { it.isFile && it.name == "reachability-metadata.json" }
    .maxByOrNull {
      Files.readAttributes(it.toPath(), BasicFileAttributes::class.java).lastModifiedTime()
    }

    if (latestFile != null) {
      println("Copying reachability-metadata.json from: ${latestFile.absolutePath}")
      destinationFile.parentFile.mkdirs()
      latestFile.copyTo(destinationFile, overwrite = true)
      println("Paste into: ${destinationFile.absolutePath}")
    } else {
      println("No reachability-metadata.json file found in build/native/agent-output")
    }
  }
}
